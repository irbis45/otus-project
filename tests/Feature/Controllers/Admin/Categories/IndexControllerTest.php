<?php

namespace Tests\Feature\Controllers\Admin\Categories;

use App\Models\User;
use App\Models\Role;
use App\Models\Category;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use PHPUnit\Framework\Attributes\Group;
use Tests\TestCase;

#[Group('admin')]
#[Group('admin-categories')]
#[Group('admin-categories-index')]
class IndexControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected const URL_INDEX = '/admin_panel/categories';

    private User $adminUser;
    private Role $adminRole;

    public function setUp(): void
    {
        parent::setUp();

        // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        $this->adminRole = Role::where('slug', 'admin')->first();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        $this->adminUser = User::factory()->create();
        $this->adminUser->roles()->attach($this->adminRole->id);
    }

    public function test_admin_can_view_categories_index(): void
    {
        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index');
    }

    public function test_categories_index_shows_all_categories(): void
    {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        $categories = Category::create([
            'name' => '–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'first-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $categories = Category::create([
            'name' => '–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'second-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => false
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_shows_both_active_and_inactive_categories(): void
    {
        // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $activeCategory = Category::create([
            'name' => '–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'active-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $inactiveCategory = Category::create([
            'name' => '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'inactive-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => false
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_shows_category_details(): void
    {
        $category = Category::create([
            'name' => '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'test-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_shows_empty_state_when_no_categories(): void
    {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Category::query()->delete();

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_shows_categories_in_correct_order(): void
    {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        $categoryA = Category::create([
            'name' => 'A –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'a-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ A –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $categoryZ = Category::create([
            'name' => 'Z –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'z-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ Z –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_handles_special_characters(): void
    {
        $specialCategory = Category::create([
            'name' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()',
            'slug' => 'special-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_handles_unicode_characters(): void
    {
        $unicodeCategory = Category::create([
            'name' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å Unicode: üöÄüåüüíª',
            'slug' => 'unicode-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Å Unicode: üöÄüåüüíª',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_handles_long_names(): void
    {
        $longName = str_repeat('–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ', 2); // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É
        $longCategory = Category::create([
            'name' => $longName,
            'slug' => 'long-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_handles_long_descriptions(): void
    {
        $longDescription = str_repeat('–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ ', 20);
        $longDescCategory = Category::create([
            'name' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –¥–ª–∏–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º',
            'slug' => 'long-desc-category',
            'description' => $longDescription,
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_performance_with_many_categories(): void
    {
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $categories = [];
        for ($i = 0; $i < 100; $i++) {
            $categories[] = Category::create([
                'name' => "–ö–∞—Ç–µ–≥–æ—Ä–∏—è {$i}",
                'slug' => "category-{$i}",
                'description' => "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {$i}",
                'active' => rand(0, 1) == 1
            ]);
        }

        $startTime = microtime(true);
        
        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index');

        $endTime = microtime(true);
        $executionTime = $endTime - $startTime;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
        $this->assertLessThan(1.0, $executionTime);
    }

    public function test_categories_index_handles_empty_descriptions(): void
    {
        $noDescCategory = Category::create([
            'name' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
            'slug' => 'no-desc-category',
            'description' => null,
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_guest_cannot_access_categories_index(): void
    {
        $this->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_FOUND)
            ->assertRedirect('/login');
    }

    public function test_user_without_admin_role_cannot_access_categories_index(): void
    {
        $regularUser = User::factory()->create();

        $this->actingAs($regularUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_FORBIDDEN);
    }

    public function test_user_without_category_view_permission_cannot_access(): void
    {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        $userWithoutPermission = User::factory()->create();
        $userWithoutPermission->roles()->attach($this->adminRole->id);

        $this->actingAs($userWithoutPermission)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é admin –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
    }

    public function test_categories_index_shows_category_status_indicators(): void
    {
        $activeCategory = Category::create([
            'name' => '–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'active-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $inactiveCategory = Category::create([
            'name' => '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'inactive-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => false
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    public function test_categories_index_shows_edit_and_delete_buttons(): void
    {
        $category = Category::create([
            'name' => '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'slug' => 'test-category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'active' => true
        ]);

        $this->actingAs($this->adminUser)
            ->get(self::URL_INDEX)
            ->assertStatus(Response::HTTP_OK)
            ->assertViewIs('admin.categories.index')
            ->assertViewHas('categories');
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }
}
